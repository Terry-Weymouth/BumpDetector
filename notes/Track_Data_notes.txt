-- See, also, ExamplePostGisQueries.txt; in dir PostGIS_exercise
-- for create tables see (moved to) src.sql.remove_rebuild_track_tables

-- See column metadata
SELECT * FROM geometry_columns;
SELECT * FROM geography_columns;

-- You can insert data into the table the same as you would if it was using a GEOMETRY column:

-- Add some data into the test table
INSERT INTO global_points (name, location) VALUES ('Town', 'SRID=4326;POINT(-110 30)');
INSERT INTO global_points (name, location) VALUES ('Forest', 'SRID=4326;POINT(-109 29)');
INSERT INTO global_points (name, location) VALUES ('London', 'SRID=4326;POINT(0 49)');

-- Creating an index GEOGRAPHY works the same as GEOMETRY.
-- PostGIS will note that the column type is GEOGRAPHY and
-- create an appropriate sphere-based index instead of the usual planar index used for GEOMETRY.

-- Index the test table with a spherical index
CREATE INDEX global_points_gix ON global_points USING GIST ( location );

-- SRID=3857 (osm map data) Query and measurement functions use units of meters.
-- So distance parameters should be expressed in meters, and return
-- values should be expected in meters (or square meters for areas).

-- Show a distance query and note, London is outside the 1000km tolerance
SELECT name FROM global_points WHERE ST_DWithin(location, 'SRID=4326;POINT(-110 29)'::geography, 1000000);

-- You can see the power of GEOGRAPHY in action by calculating how close a plane flying
from Seattle to London (LINESTRING(-122.33 47.606, 0.0 51.5)) comes to Reykjavik (POINT(-21.96 64.15)).

-- All roads (as lines from planet_osm_line) that are in any track data
select ST_AsGeoJSON(ST_Transform(way,4326))
from (select distinct nearest_road_id as id from bicycle_data) as roads
    join planet_osm_line as osm
    on (roads.id=osm.osm_id);

select distinct osm.name
from (select distinct nearest_road_id as id from bicycle_data) as roads
    join planet_osm_line as osm
    on (roads.id=osm.osm_id);

-- ???
SELECT
   DISTINCT ON (road.osm_id)
   road.osm_id, bicycle_data.id, ST_Distance(road.way, bicycle_data.long_lat_original)  as dist
FROM  planet_osm_line As road, bicycle_data
WHERE ST_DWithin(road.way, bicycle_data.long_lat_original, 70)
    and not (road.highway='footway')
ORDER BY road.osm_id, bicycle_data.id, dist;

-- Distance to nearest road
-- --  New method as update for a given track - as update and query (for testing)
-- --  takes a long time! -- not used in code
update bicycle_data
set nearest_road_id = new_data.osm_id, nearest_road_distance = new_data.dist
from (select distinct on (track.id) track.id, osm.osm_id, osm.name, osm.highway,
        ST_Distance(osm.way, ST_Transform(track.long_lat_original,3857)) as dist
      from bicycle_data as track, planet_osm_line as osm
      where track.track_id=2
        and track.id=3981
        and ST_Distance(osm.way, ST_Transform(track.long_lat_original,3857)) < 20.0
        and highway is not null
        and not (highway in ('footway', 'tertiary_link', 'motorway'))
        order by track.id, st_distance
    ) as new_data
where bicycle_data.id = new_data.id;

-- Distance to nearest road - break out details
-- use 3857
-- ST_Distance(osm.way, ST_Transform(track.long_lat_original,3857))
select distinct on (track.id) track.id, osm.osm_id, osm.name, osm.highway,
    ST_Distance(osm.way, ST_Transform(track.long_lat_original,3857)) as dist
from bicycle_data as track, planet_osm_line as osm
where track.track_id=2
    and track.id=3981
    and ST_Distance(osm.way, ST_Transform(track.long_lat_original,3857)) < 20.0
    and highway is not null
    and not (highway in ('footway', 'tertiary_link', 'motorway'))
    order by  track.id, ST_Distance(osm.way, ST_Transform(track.long_lat_original,3857));


-- road graph for a given track
-- use 3857 - by implication
select one.osm_id, two.osm_id, ST_Distance(one.way, two.way) as dist from
    planet_osm_line as one, planet_osm_line as two
    where one.osm_id < two.osm_id
        and one.osm_id in (select distinct nearest_road_id from bicycle_data bd where bd.track_id=1)
        and two.osm_id in (select distinct nearest_road_id from bicycle_data bd where bd.track_id=1)
        and not one.osm_id = two.osm_id
        and ST_Distance(one.way, two.way) < 4
    order by one.osm_id, two.osm_id;


-- distance between two roads
select one.osm_id, two.osm_id, ST_Distance(one.way, two.way) as dist from
    planet_osm_line as one, planet_osm_line as two
    where one.osm_id = 8670713 and two.osm_id = 8684827;

-- select max(ST_Distance(one.way, two.way))
-- select one.osm_id, two.osm_id, one.name, two.name, ST_Distance(one.way, two.way) as dist
select one.osm_id, two.osm_id, ST_Distance(one.way, two.way) as dist
  from
    planet_osm_line as one, planet_osm_line as two
  where one.osm_id < two.osm_id
        and one.osm_id in (select distinct nearest_road_id from bicycle_data)
        and two.osm_id in (select distinct nearest_road_id from bicycle_data)
        and ST_Distance(one.way, two.way) < 20
        and ST_Distance(one.way, two.way) > 0;
--  order by one.osm_id, two.osm_id, ST_Distance(one.way, two.way);


-- get data to create a lookup table osm_id -> name for all osm_id's in track data (e.g. nearest road)
select distinct osm_id, name from planet_osm_line as oam, bicycle_data as bd
where osm_id = nearest_road_id
    and track_id = 1
order by osm_id;

-- alternative to above
select osm_id, name from planet_osm_line,
            (select distinct nearest_road_id from bicycle_data bd where bd.track_id={track_id}) as track
        where osm_id = track.nearest_road_id

-- data to populate a table or dictionary of point to road distance

select track.id, osm_id, ST_Distance(osm.way, ST_Transform(track.long_lat_original,3857)) as dist
from bicycle_data as track, planet_osm_line as osm
where track.track_id = 1
    and osm.osm_id in (select distinct nearest_road_id from bicycle_data bd where bd.track_id=1)
    and ST_Distance(osm.way, ST_Transform(track.long_lat_original,3857)) < 10;

-- get the closest point on a line (for map matching)

select  ST_AsText(ST_ClosestPoint(line, point)) as cp1,
        ST_AsText(ST_ClosestPoint(point, line)) as cp2,
        ST_AsText(point)
    from
        (select way as line
            from planet_osm_line where osm_id=8699583) as a,
        (select ST_Transform(track.long_lat_original,3857) as point
            from bicycle_data as track where id=27) as b;

-- viterbi nearest road
     -- probe
select track_id, id, nearest_road_id, nearest_road_distance, viterbi_nearest_road_distance
from bicycle_data where track_id=2 and nearest_road_id=8715654 limit 10;

select track_id, id,
    nearest_road_id, nearest_road_distance,
    viterbi_nearest_road_id, viterbi_nearest_road_distance
from bicycle_data
-- where not nearest_road_id=viterbi_nearest_road_id
limit 5;

select track_id, id, nearest_road_distance, viterbi_nearest_road_distance
from bicycle_data
-- where not nearest_road_id=viterbi_nearest_road_id
limit 5;

-- get/set all matching points

update map_matching_results as r set long_lat_remapped = x.matched_point
from
  (select r.id, ST_Transform(ST_ClosestPoint(line, point),4326) as matched_point
    from
        map_matching_results as r,
        (select osm_id, way as line
            from planet_osm_line) as a,
        (select id, ST_Transform(long_lat_original,3857) as point
            from bicycle_data) as b
    where
        r.data_id = b.id and r.nearest_road_id = a.osm_id)
    as x
  where x.id = r.id;

-- get track long,lat (original and remapped) for a given track
-- cases: get individual long,lat for each case
    -- long,lat for original track point
    select long, lat from bicycle_data where track_id=2 order by id;
    -- long,lat for remapped point
    select ST_X(long_lat_remapped), ST_Y(long_lat_remapped) from map_matching_results order by data_id;
    -- combined
    select a.id, long, lat, ST_X(long_lat_remapped), ST_Y(long_lat_remapped)
    from bicycle_data a join map_matching_results b on a.id=b.data_id
    where track_id=2
    order by a.id;

-- checking relationship between original and matched data
    select a.id, a.nearest_road_distance, b.nearest_road_distance
    from bicycle_data a join map_matching_results b on a.id=b.data_id
    where a.nearest_road_distance <> b.nearest_road_distance
    order by a.id;

    select a.id, b.nearest_road_distance,
      ST_Distance(ST_Transform(long_lat_original,3857),ST_Transform(long_lat_remapped,3857))
    from bicycle_data a join map_matching_results b on a.id=b.data_id
    where a.nearest_road_distance <> b.nearest_road_distance
    order by a.id;

-- lines (e.g.roads) across rectangle
    select ST_AsGeoJSON(ST_Transform(way,4326))
    from map_matching_roads as roads
        join planet_osm_line as osm
            on (roads.osm_id=osm.osm_id)
    where ST_Overlaps(ST_Transform(way,4326), -- ??
        ST_MakeEnvelope(-83.145066509, 42.493609926, -83.143829920, 42.494761427, 4326))


select osm_id, name
from planet_osm_line
where way &&
    ST_MakeEnvelope(-83.14047675226435, 42.495622880904875, -83.14047675226435, 42.495622880904875, 4326);

select osm_id, name,
    ST_Distance(
        way,
        (ST_Transform
            (ST_GeomFromText('POINT(-83.14448238874682 42.49406222012129)',4326), 3857)
        ))
from planet_osm_line,
(select distinct nearest_road_id from map_matching_results) as track
where name = 'North Main Street'
    and osm_id = track.nearest_road_id;

ST_Transform(geometry g1, integer srid);
-- (select distinct nearest_road_id from bicycle_data) as track

where osm_id in (418974881, 418972306, 503534888, 418973276, 503534889, 418972731)

select ST_AsGeoJSON(ST_Transform(way,4326))
    from planet_osm_line
where
    400 > ST_Distance(way,(ST_Transform
        (ST_GeomFromText('POINT(-83.14448238874682 42.49406222012129)',4326), 3857)))

where
    osm_id in

where
    100 > ST_Distance(way,(ST_Transform
        (ST_GeomFromText('POINT(-83.14448238874682 42.49406222012129)',4326), 3857)))
    and name <> ''
    and osm_id > 0
order by osm_id

select long, lat
from bicycle_data
where track_id = 1
    and 300 > ST_Distance(
        ST_Transform(long_lat_original, 3857),
        ST_Transform(ST_GeomFromText('POINT(-83.14448238874682 42.49406222012129)',4326), 3857)
    )
order by id;


-- return LineString (with SRID:4326) in for all points in a given matched track (e.g. 2)
-- use map_matching_results
SELECT ST_AsGeoJSON( ST_MakeLine( ARRAY (
    select long_lat_remapped
    from map_matching_results r join bicycle_data d on r.data_id = d.id
    where d.track_id = 2)) )

